from os import makedirs
from os.path import exists, join
from pickle import dump as pickle_dump


def write_output(output, epoch_loss_list, workdir, ens_id, output_prefix):
    if output_prefix is None:
        output_name = f"pred_{ens_id}.pickle"
    else:
        output_name = f"pred_{output_prefix}_{ens_id}.pickle"

    output_path = join(workdir, output_name)

    pickle_dump(
        {
            "output": output,
            "epoch_loss_list": epoch_loss_list,
        },
        open(output_path, "wb"),
    )


def postproc_train(prediction, y) -> dict:
    """Warm-up period must be excluded: warm-up period is usually
        equals to infected_to_recovered_or_death_time, we need to remove it since
        it is not generated by the model (e.g., people gradually die over time). In contrast,
        the death after warm-up will suddenly emerge from the initial infection.

    Args:
        param_model (_type_): _description_
        prediction (_type_): _description_
        y (_type_): _description_
    """
    output = {
        "prediction": prediction["prediction"],
        "prediction_indices": prediction["prediction_indices"],
        "output": prediction["output"],
        "y": y[0, :, 0],
        # "all_target_indices": prediction["all_target_indices"],
        # "agents_area": prediction["agents_area"],
        # "agents_ethnicity": prediction["agents_ethnicity"],
    }

    return output


def postproc_pred(prediction, y, start_t, end_t) -> dict:
    """Warm-up period must be excluded: warm-up period is usually
        equals to infected_to_recovered_or_death_time, we need to remove it since
        it is not generated by the model (e.g., people gradually die over time). In contrast,
        the death after warm-up will suddenly emerge from the initial infection.

    Args:
        param_model (_type_): _description_
        prediction (_type_): _description_
        y (_type_): _description_
    """
    
    try:
        obs_data = y[0, :, 0].detach().cpu().numpy()
    except AttributeError:
        obs_data = y[0, :, 0]
    """
    try:
        pred = prediction["prediction"][0, :].detach().cpu().numpy()
    except IndexError:
        pred = prediction["prediction"][:].detach().cpu().numpy()
    
    output = {
        "obs": obs_data,
        "pred": pred,
        "stages": {
            "all_records": prediction["all_records"],
            "all_indices": prediction["all_target_indices"],
        },
        "agents": {
            "area": prediction["agents_area"],
            "ethnicity": prediction["agents_ethnicity"],
            "gender": prediction["agents_gender"],
            "age": prediction["agents_age"],
            "vaccine": prediction["agents_vaccine"],
        },
    }
    """
    output = {
        "prediction": prediction["prediction"],
        "prediction_indices": prediction["prediction_indices"],
        "output": prediction["output"],
        "obs": obs_data}

    if start_t is None:
        start_t = 0
    if end_t is None:
        end_t = -1

    output["prediction"] = output["prediction"][start_t:end_t]

    #if output["stages"]["all_records"] is not None:
    #    output["stages"]["all_records"] = output["stages"]["all_records"][start_t:end_t]

    output["obs"] = output["obs"][start_t:end_t]

    return output
